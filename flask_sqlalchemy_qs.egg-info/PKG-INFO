Metadata-Version: 2.1
Name: flask-sqlalchemy-qs
Version: 1.2
Summary: Generate and manipulatew SQLAlchemy filters and sorts from query strings in the URL
Home-page: https://github.com/marcogil93
Author: Marco Gil
Author-email: marcogil93@gmail.com
License: MIT
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.7
Classifier: Operating System :: OS Independent
Classifier: Framework :: Flask
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Provides-Extra: dev

# flask-sqlalchemy-qs

flask-sqlalchemy-qs is a Python library that enables processing of query strings and its usage in conjunction with Flask and SQLAlchemy. The library provides tools for generating and manipulating SQLAlchemy filters and sorts from query strings in the URL, making it easier to build robust and flexible RESTful APIs. 

`/users?filters[username][eq]=awesomeuser@example.com`

`/users?filters[person][age][gte]=22&sorts[0][person][age]=DESC&limit=10&offset=0`

## Installation

Install flask-sqlalchemy-qs with pip:

```bash
pip install flask-sqlalchemy-qs
```

## Usage

To get the filters, sorts, limit, and offset from the query string is necesarry to follow the next syntaxis: 


### For the "filters" parameter

`GET /api/endpoint?filters[field][operator]=value`

The following operators are available:

| Operator    | Description                        |
| ----------- | ---------------------------------- |
| eq          | Equal                              |
| ne          | Not equal                          |
| lt          | Less than                          |
| lte         | Less than or equal to              |
| gt          | Greater than                       |
| gte         | Greater than or equal to           |
| in          | Included in an array               |
| nin         | Not included in an array           |
| contains    | Contains                           |
| ncontains   | Does not contain                   |
| icontains   | Contains (case-insensitive)        |
| like        | Like                               |
| ilike       | Like (case-insensitive)            |
| not_like    | Not Like                           |
| not_ilike   | Not Like (case-insensitive)        |
| nicontains  | Does not contain (case-insensitive)|
| startswith  | Starts with                        |
| istartswith | Starts with (case-insensitive)     |
| endswith    | Ends with                          |
| iendswith   | Ends with (case-insensitive)       |
| or          | Joins the filters in an "or" expression  |
| and         | Joins the filters in an "and" expression |
| not         | Joins the filters in an "not" expression |

Examples:


```
#Simple usage
/users?filters[username][eq]=username@example.com
```

```
#Relationship usage (User has a person)
/users?filters[person][name][eq]=Marco
```

```
#Complex usage
/users?filters[username][contains]=awesome.com&filters[person][age][gte]=25
```

```
# in and nin usage
/users?filters[person][age][in][0]=20&filters[person][age][in][1]=25&filters[person][age][in][2]=30
```

```
# boolean usage
/users?filters[person][age][in][0]=20&filters[person][age][in][1]=25&filters[person][age][in][2]=30
```

```
# boolean usage
/users?filters[or][0][username][eq]=username1&filters[or][1][username][eq]=username2
```

```
# Complex boolean usage
/users?filters[or][0][username][contains]=awesome.com&filters[or][1][not][0][and][0][person][age][gte]=20&filters[or][1][not][0][and][1][person][age][lte]=30
```

### For the "sorts" parameter

`GET /api/endpoint?sorts[priority_index][field]=order`

```
# Sort usage
/users?sorts[0][person][age]=DESC&sorts[1][username]=ASC
```

### For the "limit" and "offset" parameter 

`GET /api/endpoint?limit=10&offset=2`

First, import the function get_url_query_ctx

`from flas_sqlalchemy_qs import get_url_query_ctx`

This function can be used to process query strings from the current URL in Flask:

`ctx = get_url_query_ctx()`

ctx is a dictionary that contains processed filters, sorts, limits, and offsets from the query string.

type filters: dict()

type offset: integer

type limit: integer

type sorts: list(dict())

In order to use it in the sqlalchemy query object. The BaseQuery needs to be imported and set as the query_class

```
from flas_sqlalchemy_qs import BaseQuery

# In this case, a Base Model is defined with its query_class attribute set to BaseQuery
class Base(db.Model):
  __abstract__ = True
  query_class = BaseQuery

class User(Base):
  id       = db.Column(db.Integer, primary_key=True)
  ...
```

Then, you can query your models as follows:

```
ctx = get_url_query_ctx()
query = User.query.filter_by_ctx(filters=ctx["filters]) \
                  .sort_by_ctx(sorts=ctx["sorts"]) \
                  .offset(ctx["offset"]) \
                  .limit("limit")

results = query.all()

```
## Requirements 
SQLALCHEMYSQLAlchemy~=2.0
flask~=2.2
flask-sqlalchemy~=3.0

## Contribution
Contributions to this project are welcome. Please open an issue or make a pull request.

## License
This project is licensed under the terms of the MIT license.

## Support
If you have any issues or suggestions, please open an issue on this repository.

## Authors
Marco Gil, marcogil93@gmail.com
